#!/usr/bin/env node
/**
 * Bundle all translation files into a single TypeScript module
 * This script runs during the build process to embed translations directly into the code
 * Includes validation to ensure translation completeness before bundling
 */

import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { fileURLToPath } from 'url';
import { TranslationValidator } from './validate-translations.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const LOCALES_DIR = path.join(__dirname, '../locales');
const OUTPUT_DIR = path.join(__dirname, '../src/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'translations.ts');

async function bundleTranslations() {
  try {
    console.log(chalk.blue('üì¶ Bundling translations with validation...'));
    
    // Step 1: Validate translations first
    console.log(chalk.cyan('üîç Step 1: Validating translations...'));
    const validator = new TranslationValidator('development');
    const isValid = await validator.validate();
    
    if (!isValid) {
      console.error(chalk.red('\n‚ùå Translation validation failed! Build aborted.'));
      console.error(chalk.yellow('üí° Please fix the translation issues above before building.'));
      process.exit(1);
    }
    
    console.log(chalk.green('‚úÖ Translation validation passed!'));
    
    // Step 2: Bundle translations
    console.log(chalk.cyan('\nüì¶ Step 2: Bundling validated translations...'));
    
    // Ensure output directory exists
    await fs.ensureDir(OUTPUT_DIR);
    
    // Object to store all translations
    const translations = {};
    const translationStats = {};
    
    // Read all language directories
    const languageDirs = await fs.readdir(LOCALES_DIR);
    
    for (const lang of languageDirs) {
      const langPath = path.join(LOCALES_DIR, lang);
      const stat = await fs.stat(langPath);
      
      if (stat.isDirectory()) {
        const translationFile = path.join(langPath, 'translation.json');
        
        if (await fs.pathExists(translationFile)) {
          console.log(chalk.white(`  Loading ${lang} translations...`));
          const content = await fs.readJson(translationFile);
          translations[lang] = { translation: content };
          
          // Count translation keys for stats
          translationStats[lang] = countTranslationKeys(content);
        }
      }
    }
    
    // Generate enhanced TypeScript content with metadata
    const languageList = Object.keys(translations);
    const bundleMetadata = {
      generatedAt: new Date().toISOString(),
      languages: languageList,
      stats: translationStats,
      totalLanguages: languageList.length,
      buildVersion: process.env.npm_package_version || 'unknown'
    };

    const tsContent = `/**
 * Auto-generated translations bundle
 * Generated at: ${bundleMetadata.generatedAt}
 * Build version: ${bundleMetadata.buildVersion}
 * Languages: ${languageList.join(', ')}
 * 
 * VALIDATION STATUS: ‚úÖ PASSED
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * This file is automatically generated during the build process.
 * To update translations, edit files in the locales/ directory.
 */

export const bundledTranslations = ${JSON.stringify(translations, null, 2)} as const;

export const translationMetadata = {
  generatedAt: '${bundleMetadata.generatedAt}',
  languages: ${JSON.stringify(languageList)},
  stats: ${JSON.stringify(translationStats, null, 2)},
  totalLanguages: ${bundleMetadata.totalLanguages},
  buildVersion: '${bundleMetadata.buildVersion}',
  validated: true
} as const;

export type TranslationResources = typeof bundledTranslations;
export type SupportedLanguage = keyof TranslationResources;
export type TranslationStats = typeof translationMetadata.stats;
`;
    
    // Write the TypeScript file
    await fs.writeFile(OUTPUT_FILE, tsContent, 'utf-8');
    
    // Success reporting with enhanced stats
    console.log(chalk.green(`\n‚úÖ Translations bundled successfully!`));
    console.log(chalk.white(`   üìÑ Output: ${OUTPUT_FILE}`));
    console.log(chalk.white(`   üåç Languages: ${languageList.join(', ')}`));
    
    // Display key counts per language
    console.log(chalk.cyan('\nüìä Translation key counts:'));
    for (const [lang, count] of Object.entries(translationStats)) {
      console.log(chalk.white(`   ${lang.toUpperCase()}: ${count} keys`));
    }
    
    console.log(chalk.green('\nüéâ Build ready for compilation!'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå Error bundling translations:'), error.message);
    console.error(chalk.yellow('üí° This error occurred after validation passed. Check file permissions and disk space.'));
    process.exit(1);
  }
}

/**
 * Recursively count translation keys in an object
 */
function countTranslationKeys(obj) {
  let count = 0;
  
  for (const value of Object.values(obj)) {
    if (typeof value === 'object' && value !== null) {
      count += countTranslationKeys(value);
    } else {
      count++;
    }
  }
  
  return count;
}

// Run the bundler
bundleTranslations();