#!/usr/bin/env node
/**
 * Bundle all translation files into a single TypeScript module
 * This script runs during the build process to embed translations directly into the code
 */

const fs = require('fs-extra');
const path = require('path');

const LOCALES_DIR = path.join(__dirname, '../locales');
const OUTPUT_DIR = path.join(__dirname, '../src/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'translations.ts');

async function bundleTranslations() {
  try {
    console.log('üì¶ Bundling translations...');
    
    // Ensure output directory exists
    await fs.ensureDir(OUTPUT_DIR);
    
    // Object to store all translations
    const translations = {};
    
    // Read all language directories
    const languageDirs = await fs.readdir(LOCALES_DIR);
    
    for (const lang of languageDirs) {
      const langPath = path.join(LOCALES_DIR, lang);
      const stat = await fs.stat(langPath);
      
      if (stat.isDirectory()) {
        const translationFile = path.join(langPath, 'translation.json');
        
        if (await fs.pathExists(translationFile)) {
          console.log(`  Loading ${lang} translations...`);
          const content = await fs.readJson(translationFile);
          translations[lang] = { translation: content };
        }
      }
    }
    
    // Generate TypeScript content
    const tsContent = `/**
 * Auto-generated translations bundle
 * Generated at: ${new Date().toISOString()}
 * DO NOT EDIT THIS FILE MANUALLY
 */

export const bundledTranslations = ${JSON.stringify(translations, null, 2)} as const;

export type TranslationResources = typeof bundledTranslations;
export type SupportedLanguage = keyof TranslationResources;
`;
    
    // Write the TypeScript file
    await fs.writeFile(OUTPUT_FILE, tsContent, 'utf-8');
    
    console.log(`‚úÖ Translations bundled successfully to ${OUTPUT_FILE}`);
    console.log(`   Languages included: ${Object.keys(translations).join(', ')}`);
    
  } catch (error) {
    console.error('‚ùå Error bundling translations:', error);
    process.exit(1);
  }
}

// Run the bundler
bundleTranslations();