name: 🔄 Update Tools Database

on:
  # Run weekly on Sundays at 6:00 AM UTC
  schedule:
    - cron: '0 6 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-tools-database:
    runs-on: ubuntu-latest
    name: Update Tools Database with Latest Ecosystem Stats
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Check Current Database Version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -e "console.log(require('./tools.json').version)")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📊 Current database version: $CURRENT_VERSION"

      - name: 🚀 Run Tools Database Updater
        id: update
        run: |
          echo "🔄 Starting tools database update..."
          node scripts/update-tools-data.js
          echo "✅ Update completed"

      - name: 📊 Check for Changes
        id: changes
        run: |
          if git diff --quiet tools.json; then
            echo "No changes detected in tools.json"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in tools.json"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Get new version
            NEW_VERSION=$(node -e "console.log(require('./tools.json').version)")
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
            # Show diff stats
            echo "📈 Database changes:"
            git diff --stat tools.json
          fi

      - name: 📝 Generate Commit Message
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        id: commit_msg
        run: |
          NEW_VERSION="${{ steps.changes.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          
          # Count tools for stats
          TOOL_COUNT=$(node -e "
            const data = require('./tools.json');
            let count = 0;
            Object.values(data.categories).forEach(cat => {
              count += Object.keys(cat.tools).length;
            });
            console.log(count);
          ")
          
          COMMIT_MSG="chore: Update tools database with latest ecosystem stats

📊 Database Statistics:
- Version: ${CURRENT_VERSION} → ${NEW_VERSION}
- Total Tools: ${TOOL_COUNT}
- Updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')

🔄 Automated update includes:
- NPM download statistics
- GitHub stars and activity data
- Deprecation status checks  
- Popularity score recalculation

🤖 Generated by WOARU Tools Database Updater"

          # Write to file to handle multiline
          echo "$COMMIT_MSG" > commit_message.txt
          echo "Commit message prepared"

      - name: 🔧 Configure Git
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "WOARU Database Updater"

      - name: 💾 Commit Changes
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git add tools.json
          git commit -F commit_message.txt
          echo "✅ Changes committed"

      - name: 🏷️ Create Version Tag
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          NEW_VERSION="${{ steps.changes.outputs.new_version }}"
          git tag -a "tools-db-v${NEW_VERSION}" -m "Tools Database version ${NEW_VERSION}

📊 Updated with latest ecosystem data
🤖 Automated release by WOARU Database Updater"
          echo "✅ Tag created: tools-db-v${NEW_VERSION}"

      - name: 🚀 Push Changes
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git push origin main
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            git push origin --tags
            echo "✅ Changes and tags pushed to main"
          else
            echo "✅ Forced update pushed to main"
          fi

      - name: 📊 Update Summary
        if: always()
        run: |
          echo "## 🔄 Tools Database Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ **Update Successful**" >> $GITHUB_STEP_SUMMARY
            echo "- Previous Version: \`${{ steps.current_version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- New Version: \`${{ steps.changes.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Changes: Database updated with latest ecosystem stats" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "⚡ **Forced Update Completed**" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${{ steps.current_version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Changes: Force update completed (no data changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No Update Needed**" >> $GITHUB_STEP_SUMMARY
            echo "- Current Version: \`${{ steps.current_version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Status: Database is already up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Next Scheduled Update" >> $GITHUB_STEP_SUMMARY
          echo "🗓️ Every Sunday at 6:00 AM UTC" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Notify on Failure
        if: failure()
        run: |
          echo "❌ Tools database update failed"
          echo "Check the workflow logs for details"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "The tools database update encountered an error. Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY